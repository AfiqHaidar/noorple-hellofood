import Head from "next/head";
import { useForm } from "react-hook-form";
import { motion } from "framer-motion";
import { TitleText, TypingText } from "./components/CustomText";
import React, { useEffect, useState } from "react";

const staggerContainer = (staggerChildren: number, delayChildren: number) => ({
  hidden: {},
  show: {
    transition: {
      staggerChildren,
      delayChildren,
    },
  },
});

export const zoomIn = (delay: number, duration: number) => ({
  hidden: {
    scale: 0,
    opacity: 0,
  },
  show: {
    scale: 1,
    opacity: 1,
    transition: {
      type: "tween",
      delay,
      duration,
      ease: "easeOut",
    },
  },
});

const slideButton = (direction: string) => ({
  hidden: {
    opacity: 0,
    x: direction === "left" ? 20 : direction === "right" ? -20 : 0,
  },
  show: {
    opacity: 1,
    x: 0,
    transition: {
      type: "tween",
      ease: "easeOut",
      duration: 1,
    },
  },
});

type FormValues = {
  firstname: string;
  lastname: string;
  age: number;
  idennum: string;
  gender: string;
  streetaddress: string;
  city: string;
  zip: string;
  phone: string;
  province: string;
  email: string;
  pass: string;
};

const maxStep = 3;

export default function Home() {
  const {
    register,
    handleSubmit,
    watch,
    reset,
    getValues,
    formState,
    formState: { errors, isSubmitting, defaultValues, isValid },
  } = useForm<FormValues>({
    defaultValues: {
      firstname: "",
      lastname: "",
      streetaddress: "",
      city: "",
      zip: "",
      phone: "",
      email: "",
      pass: "",
      age: undefined,
      idennum: "",
      gender: "",
      province: "",
    },
    mode: "all",
  });

  useEffect(() => {
    if (formState.isSubmitSuccessful) {
      reset({
        firstname: "",
        lastname: "",
        streetaddress: "",
        city: "",
        zip: "",
        phone: "",
        province: "Available province for Shipping",
        email: "",
        pass: "",
        age: undefined,
        idennum: "",
        gender: "",
      });
      alert("Successful Sign Up");
    }
  }, [formState, reset]);

  console.log(
    watch(["firstname", "lastname", "streetaddress", "city", "zip", "phone"])
  );
  const [multiState, setMultiState] = React.useState(0);
  const nextStep = () => {
    setMultiState((cur) => cur + 1);
  };
  const prevStep = () => {
    setMultiState((cur) => cur - 1);
  };

  const renderNext = () => {
    if (multiState > 1) {
      return undefined;
    } else {
      return (
        <motion.button
          variants={slideButton("right")}
          initial="hidden"
          animate="show"
          transition={{ type: "spring", stiffness: 100, damping: 8 }}
          type="button"
          className={`${
            multiState === 0 ? "rounded-full" : "rounded-r-full"
          }  p-1 bg-slate-900 text-white hover:text-slate-900 hover:bg-slate-300 cursor-pointer mt-3 max-w-[100px] w-[100px] `}
          onClick={nextStep}
        >
          Next
        </motion.button>
      );
    }
  };

  const renderPrev = () => {
    if (multiState === 0) {
      return undefined;
    } else {
      return (
        <motion.button
          variants={slideButton("left")}
          initial="hidden"
          animate="show"
          transition={{ type: "spring", stiffness: 100, damping: 8 }}
          type="button"
          className={`${
            multiState === 2 ? "rounded-full" : "rounded-l-full"
          }  p-1 bg-slate-900 text-white hover:text-slate-900 hover:bg-slate-300 cursor-pointer mt-3 max-w-[100px] w-[100px] `}
          onClick={prevStep}
        >
          Prev
        </motion.button>
      );
    }
  };

  const renderSubmit = () => {
    if (multiState === 2) {
      return (
        <motion.input
          variants={zoomIn(0.4, 1)}
          initial="hidden"
          whileInView="show"
          whileHover={{ scale: 1.1 }}
          transition={{ type: "spring", stiffness: 100, damping: 8 }}
          type="submit"
          className="rounded-full p-1 bg-slate-900 text-white hover:text-slate-900 
                hover:bg-slate-300 cursor-pointer mt-3 max-w-[300px] w-[300px]"
        />
      );
    } else {
      return undefined;
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://stijndv.com" />
        <link
          rel="stylesheet"
          href="https://stijndv.com/fonts/Eudoxus-Sans.css"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-gray-700">
        <section className="sm:p-16 xs:p-8 px-6 py-12 w-screen h-screen flex justify-center items-center ">
          <div className="mx-auto max-w-[1280px] w-full h-full flex justify-center items-center ">
            <form
              action=""
              className="flex flex-col gap-4 items-center"
              onSubmit={handleSubmit((data) => {
                console.log(data);
              })}
            >
              {multiState >= 0 && (
                <div
                  className={
                    multiState === 0 ? "flex flex-col gap-10" : "hidden"
                  }
                >
                  <motion.div
                    className="flex flex-col"
                    variants={staggerContainer(1, 1)}
                    initial="hidden"
                    whileInView="show"
                    viewport={{ once: false, amount: 0.25 }}
                  >
                    <TypingText
                      title={`${multiState + 1} of ${maxStep}`}
                      styling="text-center"
                    />
                    <TitleText
                      title="Personal"
                      styling="text-center font-extrabold "
                    />
                  </motion.div>

                  <motion.div
                    variants={zoomIn(0.4, 1)}
                    initial="hidden"
                    whileInView="show"
                    className="flex-col grid grid-cols-1 gap-5"
                  >
                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="First Name"
                        className="p-2 rounded-xl h-9"
                        {...register("firstname", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.firstname?.message}{" "}
                      </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Last Name"
                        className="p-2 rounded-xl h-9"
                        {...register("lastname", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.lastname?.message}{" "}
                      </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Identification Number"
                        className="p-2 rounded-xl h-9"
                        {...register("idennum", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.idennum?.message}{" "}
                      </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="number"
                        placeholder="Age"
                        className="p-2 rounded-xl h-9"
                        {...register("age", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300"> {errors.age?.message} </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Phone Number"
                        className="p-2 rounded-xl h-9"
                        {...register("phone", {
                          required: "please fill out the box",
                          minLength: {
                            value: 10,
                            message: "invalid phone number",
                          },
                          maxLength: {
                            value: 12,
                            message: "invalid phone number",
                          },
                        })}
                      />
                      <p className="text-red-300"> {errors.phone?.message} </p>
                    </div>

                    <div className="flex flex-col ">
                      <select
                        placeholder="Gender"
                        {...register("gender", {
                          required: "please select a country",
                        })}
                        className="p-2 rounded-xl h-9"
                      >
                        <option
                          value=""
                          disabled
                          selected
                          className="opacity-50"
                        >
                          Gender
                        </option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Female">Helicopter</option>
                        <option value="Other">Other</option>
                      </select>
                      <p className="text-red-300">
                        {" "}
                        {errors.province?.message}{" "}
                      </p>
                    </div>
                  </motion.div>
                </div>
              )}

              {multiState >= 1 && (
                <div
                  className={
                    multiState === 1 ? "flex flex-col gap-10" : "hidden"
                  }
                >
                  <motion.div
                    className="flex flex-col"
                    variants={staggerContainer(1, 1)}
                    initial="hidden"
                    whileInView="show"
                    viewport={{ once: false, amount: 0.25 }}
                  >
                    <TypingText
                      title={`${multiState + 1} of ${maxStep}`}
                      styling="text-center"
                    />
                    <TitleText
                      title="Address"
                      styling="text-center font-extrabold "
                    />
                  </motion.div>

                  <motion.div
                    variants={zoomIn(0.4, 1)}
                    initial="hidden"
                    whileInView="show"
                    className="flex-col grid  gap-5"
                  >
                    {/* <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="First Name"
                        className="p-2 rounded-xl h-9"
                        {...register("firstname", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.firstname?.message}{" "}
                      </p>
                    </div> */}

                    {/* <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Last Name"
                        className="p-2 rounded-xl h-9"
                        {...register("lastname", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.lastname?.message}{" "}
                      </p>
                    </div> */}

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Street Address"
                        className="p-2 rounded-xl h-9"
                        {...register("streetaddress", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300">
                        {" "}
                        {errors.streetaddress?.message}{" "}
                      </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="City"
                        className="p-2 rounded-xl h-9"
                        {...register("city", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300"> {errors.city?.message} </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Zip Code"
                        className="p-2 rounded-xl h-9"
                        {...register("zip", {
                          required: "please fill out the box",
                        })}
                      />
                      <p className="text-red-300"> {errors.zip?.message} </p>
                    </div>

                    <div className="flex flex-col">
                      <input
                        type="text"
                        placeholder="Phone Number"
                        className="p-2 rounded-xl h-9"
                        {...register("phone", {
                          required: "please fill out the box",
                          minLength: {
                            value: 10,
                            message: "invalid phone number",
                          },
                          maxLength: {
                            value: 12,
                            message: "invalid phone number",
                          },
                        })}
                      />
                      <p className="text-red-300"> {errors.phone?.message} </p>
                    </div>

                    <div className="flex flex-col">
                      <select
                        placeholder="Available Province"
                        {...register("province", {
                          required: "please select your province",
                        })}
                        className="p-2 rounded-xl h-9"
                      >
                        <option
                          value=""
                          disabled
                          selected
                          className="opacity-50"
                        >
                          Available Province for Shipping
                        </option>
                        <option value="Male">Jawa tengah</option>
                        <option value="Female">Jawa timur</option>
                        <option value="Other">Jakarta</option>
                      </select>
                      <p className="text-red-300">{errors.province?.message}</p>
                    </div>
                  </motion.div>
                </div>
              )}

              {multiState >= 2 && (
                <div
                  className={
                    multiState === 2 ? "flex flex-col gap-10" : "hidden"
                  }
                >
                  <motion.div
                    className="flex flex-col"
                    variants={staggerContainer(1, 1)}
                    initial="hidden"
                    whileInView="show"
                    viewport={{ once: false, amount: 0.25 }}
                  >
                    <TypingText
                      title={`${multiState + 1} of ${maxStep}`}
                      styling="text-center"
                    />
                    <TitleText
                      title="Email"
                      styling="text-center font-extrabold "
                    />
                  </motion.div>

                  <motion.div
                    variants={zoomIn(0.4, 1)}
                    initial="hidden"
                    whileInView="show"
                    className="flex flex-col gap-2"
                  >
                    <input
                      type="text"
                      placeholder="Email"
                      className="p-2 rounded-xl h-9"
                      {...register("email", {
                        required: true,
                        pattern: {
                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                          message: "invalid email address",
                        },
                      })}
                    />

                    <p className="text-red-300"> {errors.email?.message} </p>

                    <input
                      type="password"
                      placeholder="Password"
                      className="p-2 rounded-xl h-9"
                      {...register("pass", { required: true })}
                    />
                  </motion.div>
                  {renderSubmit()}
                </div>
              )}

              <div className="flex">
                {renderPrev()}
                {renderNext()}
              </div>

              {/* <pre>{JSON.stringify(watch(), null, 2)}</pre> */}
            </form>
          </div>
        </section>
      </main>
    </>
  );
}
